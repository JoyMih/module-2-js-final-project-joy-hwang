import { Component, OnDestroy, OnInit, inject } from '@angular/core';
import { ChessBoardComponent } from '../chess-board/chess-board.component';
import { StockfishService } from './stockfish.service';
import { ChessBoardService } from '../chess-board/chess-board.service';
import { firstValueFrom, Subscription } from 'rxjs';

@Component({
  selector: 'app-computer-mode',
  templateUrl: '../chess-board/chess-board.component.html', // We updated this from "./computer-mode.component.html"
  styleUrls: ['../chess-board/chess-board.component.css'] // We updated this as well. It is also noted that we deleted the computer mode HTML and CSS files that were pre-generated by Angular for us
})
export class ComputerModeComponent extends ChessBoardComponent implements OnInit, OnDestroy { // we extended the chessboard component class
  private subscriptions$ = new Subscription(); // Private subscriptions property
  // Injecting Stockfish service using the constructor method
  constructor(private stockfishService: StockfishService) {
    // Calling the super constructor
    super(inject(ChessBoardService));
  }
  ngOnInit(): void {
    throw new Error('Method not implemented.');
  }

  public ngOnInIt(): void {
    const chessBoardStateSubscription$: Subscription = this.chessBoardService.chessBoardState$.subscribe({
      next: async (FEN: string) => { // Using async in conjunction with await
        const player: string = FEN.split(" ")[1];
        if (player === "w") return; // Making sure that the computer only plays with Pink pieces

        // Converting Observable to Promise using "await" keyword from rxjs operator
        const { prevX, prevY, newX, newY, promotedPiece } = await firstValueFrom(this.stockfishService.getBestMove(FEN)); // Receiving best move from Stockfish string
        this.updateBoard(prevX, prevY, newX, newY, promotedPiece);
      }
    });

    this.subscriptions$.add(chessBoardStateSubscription$);
  }

  public ngOnDestroy(): void{ // Unsubscribing from the subscriptions above using OnDestroy method
    this.subscriptions$.unsubscribe;
  };
}
