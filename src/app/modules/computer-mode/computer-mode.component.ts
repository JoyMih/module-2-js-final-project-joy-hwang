import { Component, OnDestroy, OnInit, inject } from '@angular/core';
import { ChessBoardComponent } from '../chess-board/chess-board.component';
import { StockfishService } from './stockfish.service';
import { ChessBoardService } from '../chess-board/chess-board.service';
import { firstValueFrom, Subscription } from 'rxjs';
import { Color } from '../../chess-logic/models';

@Component({
  selector: 'app-computer-mode',
  templateUrl: '../chess-board/chess-board.component.html', // We updated this from "./computer-mode.component.html"
  styleUrls: ['../chess-board/chess-board.component.css'] // We updated this as well. It is also noted that we deleted the computer mode HTML and CSS files that were pre-generated by Angular for us
})

export class ComputerModeComponent extends ChessBoardComponent implements OnInit, OnDestroy { // we extended the chessboard component class
  private computerSubscriptions$ = new Subscription(); // Private subscriptions property

  constructor(private stockfishService: StockfishService) { // Injecting Stockfish service using the constructor method
    super(inject(ChessBoardService)); // Calling the super constructor
  }
  
  public override ngOnInit(): void {     // If player selects Pink pieces to play, we rotate the board for that configuration
    super.ngOnInit();

    const computerConfigurationSubscription$: Subscription = this.stockfishService.computerConfiguration$.subscribe({
      next:(computerConfiguration) => {
        if(computerConfiguration.color === Color.White) this.flipBoard();
      }
    });

    const chessBoardStateSubscription$: Subscription = this.chessBoardService.chessBoardState$.subscribe({
      next: async (FEN: string) => { // Using async in conjunction with await
        // console.log("test")
        if (this.chessBoard.isTheGameOver) {
          chessBoardStateSubscription$.unsubscribe(); // If the game is over, chessBoardState$ subscription is unsubscribed from
          return;
        }
        const player: Color = FEN.split(" ")[1] === "w" ? Color.White : Color.Pink;
        if (player !== this.stockfishService.computerConfiguration$.value.color) return; 
        // If the player color is different from the computer configuration's value for color, we return from the function

        // Converting Observable to Promise using "await" keyword from rxjs operator
        const { prevX, prevY, newX, newY, promotedPiece } = await firstValueFrom(this.stockfishService.getBestMove(FEN)); // Receiving best move from Stockfish string
        this.updateBoard(prevX, prevY, newX, newY, promotedPiece);
      }
    });

    this.computerSubscriptions$.add(chessBoardStateSubscription$);
    this.computerSubscriptions$.add(computerConfigurationSubscription$);
  }

  public override ngOnDestroy(): void{ // Unsubscribing from the subscriptions above using OnDestroy method
    super.ngOnDestroy();
    this.computerSubscriptions$.unsubscribe;
  };
}
